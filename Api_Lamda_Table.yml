AWSTemplateFormatVersion: 2010-09-09
Description: VW-Test Api and Lambda function and create shop table

Parameters:
  apiGatewayName:
    Type: String
    Default: VW-Test-api
  apiGatewayStageName:
    Type: String
    AllowedPattern: "[a-z0-9]+"
    Default: final
  apiGatewayHTTPMethod:
    Type: String
    Default: POST
Resources:
  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName:
        Fn::Sub: lambda-role
      AssumeRolePolicyDocument:
        Statement:
          - Action:
            - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
              - lambda.amazonaws.com
        Version: 2012-10-17
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AWSLambdaExecute
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
        - arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess
        - arn:aws:iam::aws:policy/service-role/AWSLambdaDynamoDBExecutionRole
      
      Path: /
  lambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          import json
          import boto3   
          dynamodb = boto3.resource('dynamodb') 
          ShopTable = dynamodb.Table('Shop')    
          def lambda_handler(event,context):
             event['queryStringParameters']['id'] = int(event['queryStringParameters']['id'])
             ShopTable.put_item(Item=event['queryStringParameters'])
             return {
               'body': json.dumps('Added Entry Successfully!'),
               'statusCode': 200
               }
      Description: VW-Test Lambda function
      FunctionName: t1
      Handler: index.lambda_handler
      MemorySize: 128
      Role: 
        Fn::GetAtt:
          - LambdaRole
          - Arn
      Runtime: python3.8
  
  apiGateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Description: VW-Test API Gateway
      EndpointConfiguration:
        Types:
          - REGIONAL
      Name: !Ref apiGatewayName


   
  apiGatewayRootMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: !Ref apiGatewayHTTPMethod
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Sub
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaArn}/invocations
          - lambdaArn: !GetAtt lambdaFunction.Arn
      ResourceId: !GetAtt apiGateway.RootResourceId
      RestApiId: !Ref apiGateway

  lambdaApiGatewayInvoke:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt lambdaFunction.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${apiGateway}/${apiGatewayStageName}/${apiGatewayHTTPMethod}/
      
   
    
  apiGatewayDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - apiGatewayRootMethod
    Properties:
      RestApiId: !Ref apiGateway
      StageName: !Ref apiGatewayStageName
      
      
      
  ShopTable:
    Type: 'AWS::DynamoDB::Table'
    Properties:
      TableName: Shop
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: 'N'
      KeySchema:
        - AttributeName: id
          KeyType: "HASH"
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1